generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Book {
  id String @id @default(uuid())
  title String
  author String
  year Int
  edition Int?
  publisher String
  volume Int?
  isbn String @unique
  totalPages Int
  totalCopies Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  copies BookCopy[]
  loans Loan[]

  @@map("books")
}

model BookCopy {
  id String @id @default(uuid())
  book Book @relation(fields: [bookId], references: [id])
  bookId String
  isAvailable Boolean @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  loans Loan[]

  @@map("book_copies")
}

model User {
  id String @id @default(uuid())
  email String @unique
  password String
  name String
  cpf String @unique
  phone String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  loans Loan[]
  permissions PermissionsUsers[]

  @@map("users")
}

model Loan {
  id               String    @id @default(uuid())
  user             User      @relation(fields: [userId], references: [id])
  userId           String
  bookCopy         BookCopy  @relation(fields: [bookCopyId], references: [id])
  bookCopyId       String
  loanDate         DateTime  @default(now())
  returnDate       DateTime?
  expectedReturnDate DateTime?
  status           String    @default("borrowed")

  @@map("loans")
  Book Book[]
}


model Permissions {
  id String @id @default(uuid())
  title String @unique
  level String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  permissionsUsers PermissionsUsers[]

  @@map("permissions")
}

model PermissionsUsers {
  user User @relation(fields: [userId], references: [id])
  userId String
  permission Permissions @relation(fields: [permissionId], references: [id])
  permissionId String

  @@id([userId, permissionId])
  @@map("permissions_users")
}